(DEFPACKAGE :PEG-GRAMMAR (:USE :CL :ESRAP :CL-HEREDOC))
(IN-PACKAGE :PEG-GRAMMAR)
(DEFRULE GRAMMAR (AND SPACING (+ DEFINITION) SPACING ENDOFFILE)
  (:DESTRUCTURE
   (SPC DEF SPC2 EOF)
   (DECLARE (IGNORE SPC EOF SPC2))
   `(eval-when (:compile-toplevel :load-toplevel :execute) (DEFPACKAGE :PEG-GRAMMAR (:USE :CL :ESRAP :CL-HEREDOC)) (IN-PACKAGE :PEG-GRAMMAR) ,@DEF)))
(DEFRULE DEFINITION (AND IDENTIFIER LEFTARROW EXPRESSION SPACING (? SEMANTICCODE))
  (:DESTRUCTURE
   (ID ARR E SPC CODE)
   (DECLARE (IGNORE ARR SPC))
   (IF (NULL CODE) `(DEFRULE ,(INTERN (STRING-UPCASE ID)) ,E) `(DEFRULE ,(INTERN (STRING-UPCASE ID)) ,E ,CODE))))
(DEFRULE SEMANTICCODE (AND OPENBRACE (+ NOTBRACE) CLOSEBRACE)
  (:DESTRUCTURE (LB CODE RB) (DECLARE (IGNORE LB RB)) (READ-FROM-STRING (TEXT CODE))))
(DEFRULE NOTBRACE (AND (! "}") CHARACTER) (:LAMBDA (X) X))
(DEFRULE EXPRESSION (AND PSEQUENCE (* SLASHSEQUENCE)) (:DESTRUCTURE (SEQ SEQS) (IF SEQS `(OR ,SEQ ,@SEQS) SEQ)))
(DEFRULE SLASHSEQUENCE (AND SLASH PSEQUENCE) (:DESTRUCTURE (SL SEQ) (DECLARE (IGNORE SL)) SEQ))
(DEFRULE PSEQUENCE (* PREFIX)
  (:DESTRUCTURE (&REST PREF) (IF PREF (IF (AND (CONSP PREF) (> (LENGTH PREF) 1)) `(AND ,@PREF) (FIRST PREF)) (VALUES))))
(DEFRULE PREFIX (AND (? (OR PAND PNOT)) SUFFIX) (:DESTRUCTURE (PREF SUFF) (IF PREF (LIST PREF SUFF) SUFF)))
(DEFRULE SUFFIX (AND PRIMARY (? (OR QUESTION STAR PLUS))) (:DESTRUCTURE (PRIM SUFF) (IF SUFF (LIST SUFF PRIM) PRIM)))
(DEFRULE PRIMARY (OR P1 P2 LITERAL PCLASS DOT) (:LAMBDA (X) X))
(DEFRULE P1 (AND IDENTIFIER (! LEFTARROW)) (:FUNCTION FIRST))
(DEFRULE P2 (AND OPENPAREN EXPRESSION CLOSEPAREN) (:FUNCTION SECOND))
(DEFRULE IDENTIFIER STRINGIDENTIFIER (:LAMBDA (X) (INTERN (STRING-UPCASE X))))
(DEFRULE STRINGIDENTIFIER (AND IDENTSTART (* IDENTCONT) SPACING) (:TEXT T))
(DEFRULE IDENTSTART (CHARACTER-RANGES (#\a #\z) (#\A #\Z) #\_))
(DEFRULE IDENTCONT (OR IDENTSTART "-" (CHARACTER-RANGES (#\0 #\9))))
(DEFRULE LITERAL
    (OR (AND (CHARACTER-RANGES #\') (* NOTSINGLE) (CHARACTER-RANGES #\') SPACING)
        (AND (CHARACTER-RANGES #\") (* NOTDOUBLE) (CHARACTER-RANGES #\") SPACING))
  (:DESTRUCTURE (Q1 STRING Q1 SPC) (DECLARE (IGNORE Q1 Q2 SPC)) (TEXT STRING)))
(DEFRULE NOTSINGLE (AND (! (CHARACTER-RANGES #\')) PCHAR) (:FUNCTION SECOND))
(DEFRULE NOTDOUBLE (AND (! (CHARACTER-RANGES #\")) PCHAR) (:FUNCTION SECOND))
(DEFRULE PCLASS (AND "[" (* NOTRB) "]" SPACING)
  (:DESTRUCTURE
   (LB RANGE RB SPC)
   (DECLARE (IGNORE LB RB SPC))
   (IF (AND (CONSP RANGE) (OR (NOT (= 2 (LENGTH RANGE))) (OR (CONSP (FIRST RANGE)) (CONSP (SECOND RANGE)))))
       `(CHARACTER-RANGES ,@RANGE)
     `(CHARACTER-RANGES ,RANGE))))
(DEFRULE NOTRB (AND (! "]") RANGE) (:FUNCTION SECOND))
(DEFRULE RANGE (OR CHARRANGE SINGLECHAR))
(DEFRULE CHARRANGE (AND PCHAR "-" PCHAR) (:DESTRUCTURE (C1 DASH C2) (DECLARE (IGNORE DASH)) (LIST C1 C2)))
(DEFRULE SINGLECHAR PCHAR (:LAMBDA (C) C))
(DEFRULE PCHAR (OR ESCCHAR NUMCHAR1 NUMCHAR2 ANYCHAR))
(DEFRULE ESCCHAR (AND "\\" (OR "n" "r" "t" (CHARACTER-RANGES #\') "\"" "[" "]" "\\"))
  (:DESTRUCTURE (SL C) (DECLARE (IGNORE SL)) (CASE (CHAR C 0) (#\n #\Newline) (#\r #\Return) (#\t #\Tab) (OTHERWISE (CHAR C 0)))))
(DEFRULE NUMCHAR1 (AND "\\" (CHARACTER-RANGES (#\0 #\2)) (CHARACTER-RANGES (#\0 #\7)) (CHARACTER-RANGES (#\0 #\7)))
  (:DESTRUCTURE (SL N1 N2 N3) (DECLARE (IGNORE SL)) (CODE-CHAR (PARSE-INTEGER (CONCATENATE 'STRING N1 N2 N3) :RADIX 8))))
(DEFRULE NUMCHAR2 (AND "\\" (CHARACTER-RANGES (#\0 #\7)) (? (CHARACTER-RANGES (#\0 #\7))))
  (:DESTRUCTURE (SL N1 N2) (DECLARE (IGNORE SL)) (CODE-CHAR (PARSE-INTEGER (CONCATENATE 'STRING N1 N2) :RADIX 8))))
(DEFRULE ANYCHAR (AND (! "\\") CHARACTER) (:DESTRUCTURE (SL C) (DECLARE (IGNORE SL)) C))
(DEFRULE LEFTARROW (AND "<-" SPACING) (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) (VALUES)))
(DEFRULE SLASH (AND "/" SPACING) (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) (VALUES)))
(DEFRULE PAND (AND "&" SPACING) (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) 'AND))
(DEFRULE PNOT (AND "!" SPACING) (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) '!))
(DEFRULE QUESTION (AND "?" SPACING) (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) '?))
(DEFRULE STAR (AND "*" SPACING) (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) '*))
(DEFRULE PLUS (AND "+" SPACING) (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) '+))
(DEFRULE OPENPAREN (AND "(" SPACING) (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) (VALUES)))
(DEFRULE CLOSEPAREN (AND ")" SPACING) (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) (VALUES)))
(DEFRULE OPENBRACE (AND "{" SPACING) (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) (VALUES)))
(DEFRULE CLOSEBRACE (AND "}" SPACING) (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) (VALUES)))
(DEFRULE DOT (AND "." SPACING) (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) 'CHARACTER))
(DEFRULE SPACING (* (OR PSPACE COMMENT)) (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) (VALUES)))
(DEFRULE COMMENT (AND "#" (* (AND (! ENDOFLINE) CHAR1)) (OR ENDOFLINE ENDOFFILE)) (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) (VALUES)))
(DEFRULE CHAR1 CHARACTER (:LAMBDA (C) C))
(DEFRULE PSPACE (OR " " "	" ENDOFLINE) (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) (VALUES)))
(DEFRULE ENDOFLINE
    (OR "
"
        "
"
        "")
  (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) (VALUES)))
(DEFRULE ENDOFFILE (! CHARACTER) (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) (VALUES)))
