
(DEFPACKAGE :PEG-GRAMMAR (:USE :CL :ESRAP :CL-HEREDOC))

(IN-PACKAGE :PEG-GRAMMAR)

(ESRAP:DEFRULE GRAMMAR (AND SPACING (+ DEFINITION) SPACING ENDOFFILE)
  (:DESTRUCTURE
   (SPC DEF SPC2 EOF)
   (DECLARE (IGNORE SPC EOF SPC2))
   `(PROGN ,@DEF)))

(ESRAP:DEFRULE DEFINITION
               (AND IDENTIFIER
                    LEFTARROW
                    EXPRESSION
                    SPACING
                    (ESRAP:? SEMANTICCODE))
  (:DESTRUCTURE
   (ID ARR E SPC CODE)
   (DECLARE (IGNORE ARR SPC))
   (IF (NULL CODE)
       `(DEFRULE ,(INTERN (STRING-UPCASE ID)) ,E)
     `(DEFRULE ,(INTERN (STRING-UPCASE ID)) ,E ,CODE))))

(ESRAP:DEFRULE SEMANTICCODE (AND OPENBRACE (+ NOTBRACE) CLOSEBRACE)
  (:DESTRUCTURE
   (LB CODE RB)
   (DECLARE (IGNORE LB RB))
   (READ-FROM-STRING (TEXT CODE))))

(ESRAP:DEFRULE NOTBRACE (OR UQLITERAL (AND (ESRAP:! "}") CHARACTER))
  (:TEXT T))

(ESRAP:DEFRULE EXPRESSION (AND PSEQUENCE (* SLASHSEQUENCE))
  (:DESTRUCTURE (SEQ SEQS) (IF SEQS `(OR ,SEQ ,@SEQS) SEQ)))

(ESRAP:DEFRULE SLASHSEQUENCE (AND SLASH PSEQUENCE)
  (:DESTRUCTURE (SL SEQ) (DECLARE (IGNORE SL)) SEQ))

(ESRAP:DEFRULE PSEQUENCE (* PREFIX)
  (:DESTRUCTURE
   (&REST PREF)
   (IF PREF
       (IF (AND (CONSP PREF) (> (LENGTH PREF) 1))
           `(AND ,@PREF)
         (FIRST PREF))
     (VALUES))))

(ESRAP:DEFRULE PREFIX (AND (ESRAP:? (OR PAND PNOT)) SUFFIX)
  (:DESTRUCTURE (PREF SUFF) (IF PREF (LIST PREF SUFF) SUFF)))

(ESRAP:DEFRULE SUFFIX (AND PRIMARY (ESRAP:? (OR QUESTION STAR PLUS)))
  (:DESTRUCTURE (PRIM SUFF) (IF SUFF (LIST SUFF PRIM) PRIM)))

(ESRAP:DEFRULE PRIMARY (OR P1 P2 LITERAL PCLASS DOT) (:LAMBDA (X) X))

(ESRAP:DEFRULE P1 (AND IDENTIFIER (ESRAP:! LEFTARROW))
  (:FUNCTION FIRST))

(ESRAP:DEFRULE P2 (AND OPENPAREN EXPRESSION CLOSEPAREN)
  (:FUNCTION SECOND))

(ESRAP:DEFRULE IDENTIFIER STRINGIDENTIFIER
  (:LAMBDA (X) (INTERN (STRING-UPCASE X))))

(ESRAP:DEFRULE STRINGIDENTIFIER (AND IDENTSTART (* IDENTCONT) SPACING)
  (:TEXT T))

(ESRAP:DEFRULE IDENTSTART
               (ESRAP:CHARACTER-RANGES (#\a #\z) (#\A #\Z) #\_))

(ESRAP:DEFRULE IDENTCONT
               (OR IDENTSTART "-" (ESRAP:CHARACTER-RANGES (#\0 #\9))))

(ESRAP:DEFRULE LITERAL
               (OR (AND (ESRAP:CHARACTER-RANGES #\')
                        (* NOTSINGLE)
                        (ESRAP:CHARACTER-RANGES #\')
                        SPACING)
                   (AND (ESRAP:CHARACTER-RANGES #\")
                        (* NOTDOUBLE)
                        (ESRAP:CHARACTER-RANGES #\")
                        SPACING))
  (:DESTRUCTURE
   (Q1 STRING Q2 SPC)
   (DECLARE (IGNORE Q1 Q2 SPC))
   (TEXT STRING)))

(ESRAP:DEFRULE UQLITERAL
               (AND (ESRAP:CHARACTER-RANGES #\")
                    (* NOTDOUBLE)
                    (ESRAP:CHARACTER-RANGES #\")
                    SPACING)
  (:DESTRUCTURE
   (Q1 STRING Q2 SPC)
   (DECLARE (IGNORE SPC))
   `(,Q1 ,@STRING ,Q2)))

(ESRAP:DEFRULE NOTSINGLE
               (AND (ESRAP:! (ESRAP:CHARACTER-RANGES #\')) PCHAR)
  (:FUNCTION SECOND))

(ESRAP:DEFRULE NOTDOUBLE
               (AND (ESRAP:! (ESRAP:CHARACTER-RANGES #\")) PCHAR)
  (:FUNCTION SECOND))

(ESRAP:DEFRULE PCLASS (AND "[" (* NOTRB) "]" SPACING)
  (:DESTRUCTURE
   (LB RANGE RB SPC)
   (DECLARE (IGNORE LB RB SPC))
   (IF (AND (CONSP RANGE)
            (OR (NOT (= 2 (LENGTH RANGE)))
                (OR (CONSP (FIRST RANGE)) (CONSP (SECOND RANGE)))))
       `(CHARACTER-RANGES ,@RANGE)
     `(CHARACTER-RANGES ,RANGE))))

(ESRAP:DEFRULE NOTRB (AND (ESRAP:! "]") RANGE) (:FUNCTION SECOND))

(ESRAP:DEFRULE RANGE (OR CHARRANGE SINGLECHAR))

(ESRAP:DEFRULE CHARRANGE (AND PCHAR "-" PCHAR)
  (:DESTRUCTURE (C1 DASH C2) (DECLARE (IGNORE DASH)) (LIST C1 C2)))

(ESRAP:DEFRULE SINGLECHAR PCHAR (:LAMBDA (C) C))

(ESRAP:DEFRULE PCHAR (OR ESCCHAR NUMCHAR1 NUMCHAR2 ANYCHAR))

(ESRAP:DEFRULE ESCCHAR
               (AND "\\"
                    (OR "n"
                        "r"
                        "t"
                        (ESRAP:CHARACTER-RANGES #\')
                        "\""
                        "["
                        "]"
                        "\\"
                        "{"
                        "}"))
  (:DESTRUCTURE
   (SL CH)
   (DECLARE (IGNORE SL))
   (LET ((C (OR (AND (CHARACTERP CH) CH) (CHAR CH 0))))
     (CASE C
       (#\n #\Newline)
       (#\r #\Return)
       (#\t #\Tab)
       (OTHERWISE C)))))

(ESRAP:DEFRULE NUMCHAR1
               (AND "\\"
                    (ESRAP:CHARACTER-RANGES (#\0 #\2))
                    (ESRAP:CHARACTER-RANGES (#\0 #\7))
                    (ESRAP:CHARACTER-RANGES (#\0 #\7)))
  (:DESTRUCTURE
   (SL N1 N2 N3)
   (DECLARE (IGNORE SL))
   (CODE-CHAR (PARSE-INTEGER (CONCATENATE 'STRING N1 N2 N3) :RADIX 8))))

(ESRAP:DEFRULE NUMCHAR2
               (AND "\\"
                    (ESRAP:CHARACTER-RANGES (#\0 #\7))
                    (ESRAP:? (ESRAP:CHARACTER-RANGES (#\0 #\7))))
  (:DESTRUCTURE
   (SL N1 N2)
   (DECLARE (IGNORE SL))
   (CODE-CHAR (PARSE-INTEGER (CONCATENATE 'STRING N1 N2) :RADIX 8))))

(ESRAP:DEFRULE ANYCHAR (AND (ESRAP:! "\\") CHARACTER)
  (:DESTRUCTURE (SL C) (DECLARE (IGNORE SL)) C))

(ESRAP:DEFRULE LEFTARROW (AND "<-" SPACING)
  (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) (VALUES)))

(ESRAP:DEFRULE SLASH (AND "/" SPACING)
  (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) (VALUES)))

(ESRAP:DEFRULE PAND (AND "&" SPACING)
  (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) 'AND))

(ESRAP:DEFRULE PNOT (AND "!" SPACING)
  (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) '!))

(ESRAP:DEFRULE QUESTION (AND "?" SPACING)
  (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) '?))

(ESRAP:DEFRULE STAR (AND "*" SPACING)
  (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) '*))

(ESRAP:DEFRULE PLUS (AND "+" SPACING)
  (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) '+))

(ESRAP:DEFRULE OPENPAREN (AND "(" SPACING)
  (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) (VALUES)))

(ESRAP:DEFRULE CLOSEPAREN (AND ")" SPACING)
  (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) (VALUES)))

(ESRAP:DEFRULE OPENBRACE (AND "{" SPACING)
  (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) (VALUES)))

(ESRAP:DEFRULE CLOSEBRACE (AND "}" SPACING)
  (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) (VALUES)))

(ESRAP:DEFRULE DOT (AND "." SPACING)
  (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) 'CHARACTER))

(ESRAP:DEFRULE SPACING (* (OR PSPACE COMMENT))
  (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) (VALUES)))

(ESRAP:DEFRULE COMMENT
               (AND "#"
                    (* (AND (ESRAP:! ENDOFLINE) CHAR1))
                    (OR ENDOFLINE ENDOFFILE))
  (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) (VALUES)))

(ESRAP:DEFRULE CHAR1 CHARACTER (:LAMBDA (C) C))

(ESRAP:DEFRULE PSPACE (OR " " "	" ENDOFLINE)
  (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) (VALUES)))

(ESRAP:DEFRULE ENDOFLINE
               (OR "
"
                   "
"
                   "")
  (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) (VALUES)))

(ESRAP:DEFRULE ENDOFFILE (ESRAP:! CHARACTER)
  (:LAMBDA (LIST) (DECLARE (IGNORE LIST)) (VALUES)))
